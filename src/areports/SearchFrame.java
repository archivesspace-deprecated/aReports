/*
 * A frame to perform basic searching
 */
package areports;

import areports.report.JRReturnScreen;
import areports.utils.StringHelper;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.ListOfArrayDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import quick.dbtable.Column;
import quick.dbtable.DBTable;

/**
 *
 * @author nathan
 */
public class SearchFrame extends javax.swing.JFrame {
    // table component for dsiplaying results from SQL calls
    private DBTable dBTable;
    
    // this just store the sql calls from the jasper reports
    private TreeMap<String, String> sqlTreeMap;
    
    // used for saving files
    private final JFileChooser fc = new JFileChooser();

    /**
     * Creates new form SearchFrame
     * @param connection
     */
    public SearchFrame(Connection connection) {
        initComponents();
        addQuickTable(connection);
        
        // add a test sql select statement
        String testSQL = "SELECT\n"
                + "     resource.`title` AS Title,\n"
                + "     resource.`identifier` AS Identifier,\n"
                + "     GetResourceDateExpression(resource.`id`) AS Date,\n"
                + "     GetResourceExtent(resource.`id`) AS Extent,\n"
                + "     GetResourceExtentType(resource.`id`) AS 'Extent Type',\n"
                + "     resource.`restrictions` AS Restrictions\n"
                + "FROM\n"
                + "     `resource` resource";
        
        sqlSelectTextArea.setText(testSQL);
    }
    
    /**
     * Method to add the reports names to the drop down list, along with a map for the sql
     * @param sqlTreeMap 
     */
    public void setReportsSQLTreeMap(TreeMap<String, String> sqlTreeMap) {
        this.sqlTreeMap = sqlTreeMap;
        
        for(String filename: sqlTreeMap.keySet()) {
            reportsComboBox.addItem(filename);
        }
    }

    /**
     * Method to add the quicktable component
     */
    private void addQuickTable(Connection connection) {
        dBTable = new quick.dbtable.DBTable();

        //add to frame
        getContentPane().add(dBTable);

        dBTable.setConnection(connection);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        reportsComboBox = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();
        tsvExportButton = new javax.swing.JButton();
        htmlExportButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sqlSelectTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search Form");

        jPanel1.setLayout(new java.awt.GridLayout(2, 1));

        jPanel4.setLayout(new java.awt.GridLayout());

        reportsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Jasper Report" }));
        reportsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportsComboBoxActionPerformed(evt);
            }
        });
        jPanel4.add(reportsComboBox);

        jPanel1.add(jPanel4);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        reportButton.setText("Print Screen Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        tsvExportButton.setText("TSV Export");
        tsvExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tsvExportButtonActionPerformed(evt);
            }
        });

        htmlExportButton.setText("HTML Table Export");
        htmlExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htmlExportButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tsvExportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(htmlExportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 464, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(reportButton)
                        .addComponent(searchButton)
                        .addComponent(tsvExportButton)
                        .addComponent(htmlExportButton))
                    .addComponent(closeButton)))
        );

        jPanel1.add(jPanel3);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jLabel1.setText("SQL Select");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        sqlSelectTextArea.setColumns(20);
        sqlSelectTextArea.setRows(15);
        jScrollPane1.setViewportView(sqlSelectTextArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1013, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(147, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Method to just dispose of Window
     * @param evt 
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    
    /**
     * Method used to run the select statement
     * @param evt 
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        dBTable.setSelectSql(sqlSelectTextArea.getText());
    
        try {
            dBTable.refresh();  // this just runs the SQL command
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
            "<html><body><p style='width: 200px;'>"+ e.toString() + "</p></body></html>", 
            "SQL Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("\n***\n" + e.toString());
        }
    }                                            
    
    /**
     * Method to do a sprint screen report
     * @param evt 
     */
    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        try {
            InputStream reportStream = this.getClass().getResourceAsStream("/areports/resources/returnScreen.jrxml");
            
            JasperDesign jasperDesign = JRXmlLoader.load(reportStream);
            jasperDesign.setProperty("ReportTitle", "Print screen");
            
            JRReturnScreen returnScreen = new JRReturnScreen(jasperDesign, dBTable);
            returnScreen.createHeaderAndDetail();
            
            // get the table model to pass to the report
            TableModel tableModel = dBTable.getTable().getModel();
            ListOfArrayDataSource listOfArrayDataSource = getListOfArrayDatasource();
            
            HashMap<String, Object> parameterMap = new HashMap<String, Object>();
            parameterMap.put("ReportHeader", "Print Screen Test");
            
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameterMap, listOfArrayDataSource);

            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(SearchFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reportButtonActionPerformed
    
    /**
     * Method to export the data in the table as tsv file
     * 
     * @param evt 
     */
    private void tsvExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tsvExportButtonActionPerformed
        StringBuilder sb = new StringBuilder();
        
        // get the column names
        String[] columnNames = getColumnNames();
        int numberOfColumns = columnNames.length;
        
        for (int j = 0; j < numberOfColumns; j++) {
            String value = columnNames[j];
            
            if (j != (numberOfColumns - 1)) {
                sb.append(value).append("\t");
            } else {
                sb.append(value).append("\n");
            }
        }
        
        // get all the records and place them in buffer
        Object[][] data = dBTable.getDataArray();
        int numberOfRecords = data.length;
        
        for(int i = 0; i < numberOfRecords; i++) {
            for(int j = 0; j < numberOfColumns; j++) {
                String value = "";
                Object object = data[i][j];
                if(object != null) {
                    value = cleanUpValue(object.toString());
                }
                
                if(j != (numberOfColumns - 1)) {
                    sb.append(value).append("\t");
                } else {
                    sb.append(value).append("\n");
                }
            }
        }
        
        // now save the text file
        saveTextToFile(sb.toString(), "tsv");
    }//GEN-LAST:event_tsvExportButtonActionPerformed
    
    /**
     * 
     * @param text 
     */
    private void saveTextToFile(String text, String ext) {
        File file = new File("results." + ext);
        fc.setSelectedFile(file);
        
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            
            PrintWriter out = null;
            try {
                out = new PrintWriter(file);
                out.println(text);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SearchFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if(out != null) {
                    out.close();
                }
            }
        }
    } 
    
    private void htmlExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htmlExportButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_htmlExportButtonActionPerformed

//GEN-FIRST:event_searchButtonActionPerformed
 
//GEN-LAST:event_searchButtonActionPerformed
    /**
     * Method to select the sql string for particular report and display
     * @param evt 
     */
    private void reportsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportsComboBoxActionPerformed
        String key = reportsComboBox.getSelectedItem().toString();
        
        if(sqlTreeMap.containsKey(key)) {
            String sqlString = sqlTreeMap.get(key);
            sqlSelectTextArea.setText(sqlString);
        }
    }//GEN-LAST:event_reportsComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton htmlExportButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reportButton;
    private javax.swing.JComboBox reportsComboBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextArea sqlSelectTextArea;
    private javax.swing.JButton tsvExportButton;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Method where the list of array data source is created
     * 
     * @return 
     */
    private ListOfArrayDataSource getListOfArrayDatasource() {
        String[] columnNames = getColumnNames();
        int numberOfColumns = columnNames.length;
        
        // get the record
        List<Object[]> list = new ArrayList<Object[]>();
        
        Object[][] data = dBTable.getDataArray();
        int numberOfRecords = data.length;
        
        for(int i = 0; i < numberOfRecords; i++) {
            Object[] record = new Object[numberOfColumns];
            for(int j = 0; j < numberOfColumns; j++) {
                Object value = data[i][j];
                if(value != null) {
                    record[j] = cleanUpValue(value.toString());
                } else {
                    record[j] = "";
                }
            }
            list.add(record);
        } 
        
        ListOfArrayDataSource listOfArrayDataSource = new ListOfArrayDataSource(list, columnNames);
        return listOfArrayDataSource;
    }
    
    /**
     * Method to get the column names and return as string array
     * 
     * @return 
     */
    private String[] getColumnNames() {
        int numberOfColumns = dBTable.getColumnCount();
        String[] columnNames = new String[numberOfColumns];
        
        for (int i = 0; i < numberOfColumns; i++) {
            Column column = dBTable.getColumn(i);
            columnNames[i] = column.getHeaderValue().toString();
        }
        
        return columnNames;
    }
    
    /**
     * Method to clean up the value by removing tags etc
     * 
     * @param rawValue
     * @return 
     */
    private String cleanUpValue(String rawValue) {
        String value = "";
        
        if(rawValue.startsWith("[\"")) {
            value = rawValue.replace("[", "").replace("]","").replace("\"","").replace(",null", "").replace(",", ".");
        } else {
            value = StringHelper.tagRemover(rawValue);
        }
        
        return value;
    }

}
