/*
 * A frame to perform basic searching
 */
package areports;

import areports.report.JRReturnScreen;
import areports.utils.StringHelper;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableModel;
import mondrian.tui.XmlaSupport;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.engine.data.ListOfArrayDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.apache.commons.lang3.StringUtils;
import quick.dbtable.Column;
import quick.dbtable.DBTable;

/**
 *
 * @author nathan
 */
public class SearchFrame extends javax.swing.JFrame {

    private DBTable dBTable;

    /**
     * Creates new form SearchFrame
     * @param connection
     */
    public SearchFrame(Connection connection) {
        initComponents();
        addQuickTable(connection);
        
        // add a test sql select statement
        String testSQL = "SELECT\n"
                + "     resource.`title` AS Title,\n"
                + "     resource.`identifier` AS Identifier,\n"
                + "     GetResourceDateExpression(resource.`id`) AS Date,\n"
                + "     GetResourceExtent(resource.`id`) AS Extent,\n"
                + "     GetResourceExtentType(resource.`id`) AS 'Extent Type',\n"
                + "     resource.`restrictions` AS Restrictions\n"
                + "FROM\n"
                + "     `resource` resource";
        
        sqlSelectTextArea.setText(testSQL);
    }

    /**
     * Method to add the quicktable component
     */
    private void addQuickTable(Connection connection) {
        dBTable = new quick.dbtable.DBTable();

        //add to frame
        getContentPane().add(dBTable);

        dBTable.setConnection(connection);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sqlSelectTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search Form");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        reportButton.setText("Print Screen Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(searchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reportButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 482, Short.MAX_VALUE)
                .addComponent(closeButton))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(searchButton)
                    .addComponent(reportButton)))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jLabel1.setText("SQL Select");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        sqlSelectTextArea.setColumns(20);
        sqlSelectTextArea.setRows(5);
        jScrollPane1.setViewportView(sqlSelectTextArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(68, 68, 68))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Method to just dispose of Window
     * @param evt 
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed
    
    /**
     * Method used to run the select statement
     * @param evt 
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        dBTable.setSelectSql(sqlSelectTextArea.getText());

        try {
            //fetch the data from database to fill the table
            dBTable.refresh();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchButtonActionPerformed
    
    /**
     * Method to do a sprint screen report
     * @param evt 
     */
    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        try {
            InputStream reportStream = this.getClass().getResourceAsStream("/areports/resources/returnScreen.jrxml");
            
            JasperDesign jasperDesign = JRXmlLoader.load(reportStream);
            jasperDesign.setProperty("ReportTitle", "Print screen");
            
            JRReturnScreen returnScreen = new JRReturnScreen(jasperDesign, dBTable);
            returnScreen.createHeaderAndDetail();
            
            // get the table model to pass to the report
            TableModel tableModel = dBTable.getTable().getModel();
            ListOfArrayDataSource listOfArrayDataSource = getListOfArrayDatasource();
            
            HashMap<String, Object> parameterMap = new HashMap<String, Object>();
            parameterMap.put("ReportHeader", "Print Screen Test");
            
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameterMap, listOfArrayDataSource);

            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(SearchFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_reportButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reportButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextArea sqlSelectTextArea;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Method where the list of array data source is created
     * 
     * @return 
     */
    private ListOfArrayDataSource getListOfArrayDatasource() {
        int numberOfColumns = dBTable.getColumnCount();
        String[] columnNames = new String[numberOfColumns];
        
        for (int i = 0; i < numberOfColumns; i++) {
            Column column = dBTable.getColumn(i);
            columnNames[i] = column.getHeaderValue().toString();
        }
        
        // get the record
        List<Object[]> list = new ArrayList<Object[]>();
        
        Object[][] data = dBTable.getDataArray();
        int numberOfRecords = data.length;
        
        for(int i = 0; i < numberOfRecords; i++) {
            Object[] record = new Object[numberOfColumns];
            for(int j = 0; j < numberOfColumns; j++) {
                Object value = data[i][j];
                if(value != null) {
                    record[j] = cleanUpValue(value.toString());
                } else {
                    record[j] = "";
                }
            }
            list.add(record);
        } 
        
        ListOfArrayDataSource listOfArrayDataSource = new ListOfArrayDataSource(list, columnNames);
        return listOfArrayDataSource;
    }
    
    /**
     * Method to clean up the value by removing tags etc
     * 
     * @param rawValue
     * @return 
     */
    private String cleanUpValue(String rawValue) {
        String value = "";
        
        if(rawValue.startsWith("[\"")) {
            value = rawValue.replace("[", "").replace("]","").replace("\"","").replace(",null", "").replace(",", ".");
        } else {
            value = StringHelper.tagRemover(rawValue);
        }
        
        return value;
    }

}
